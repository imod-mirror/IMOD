
# fnVolume: The file names of tomograms
fnVolume = {'../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec', '../binnedBPV.rec'}

# fnModParticle: The file names of IMOD models corresponding to each tomogram.
fnModParticle = {'../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod', '../binnedBPV.mod'}

# initMOTL: A code specifying how to construct the initial motive list:
# 0: Set all rotational values to zero
# 
# 1: Use the particle model and reference index to
#    initialize theta (rotation around the z axis), be sure
#    the points are sorted along a direction of interest
# 
# 2: Use the particle model and reference index to initialize
#    theta and psi (rotation around the z axis and x axis)
# 
# or a string array to specify the filenames to load, must end in 1.em
initMOTL = {'../60XIcosahedralSymmetry/v1.csv', '../60XIcosahedralSymmetry/v1a.csv', '../60XIcosahedralSymmetry/v1b.csv', '../60XIcosahedralSymmetry/v1c.csv', '../60XIcosahedralSymmetry/v1d.csv', '../60XIcosahedralSymmetry/v2.csv', '../60XIcosahedralSymmetry/v2a.csv', '../60XIcosahedralSymmetry/v2b.csv', '../60XIcosahedralSymmetry/v2c.csv', '../60XIcosahedralSymmetry/v2d.csv', '../60XIcosahedralSymmetry/v3.csv', '../60XIcosahedralSymmetry/v3a.csv', '../60XIcosahedralSymmetry/v3b.csv', '../60XIcosahedralSymmetry/v3c.csv', '../60XIcosahedralSymmetry/v3d.csv', '../60XIcosahedralSymmetry/v4.csv', '../60XIcosahedralSymmetry/v4a.csv', '../60XIcosahedralSymmetry/v4b.csv', '../60XIcosahedralSymmetry/v4c.csv', '../60XIcosahedralSymmetry/v4d.csv', '../60XIcosahedralSymmetry/v5.csv', '../60XIcosahedralSymmetry/v5a.csv', '../60XIcosahedralSymmetry/v5b.csv', '../60XIcosahedralSymmetry/v5c.csv', '../60XIcosahedralSymmetry/v5d.csv', '../60XIcosahedralSymmetry/v6.csv', '../60XIcosahedralSymmetry/v6a.csv', '../60XIcosahedralSymmetry/v6b.csv', '../60XIcosahedralSymmetry/v6c.csv', '../60XIcosahedralSymmetry/v6d.csv', '../60XIcosahedralSymmetry/v7.csv', '../60XIcosahedralSymmetry/v7a.csv', '../60XIcosahedralSymmetry/v7b.csv', '../60XIcosahedralSymmetry/v7c.csv', '../60XIcosahedralSymmetry/v7d.csv', '../60XIcosahedralSymmetry/v8.csv', '../60XIcosahedralSymmetry/v8a.csv', '../60XIcosahedralSymmetry/v8b.csv', '../60XIcosahedralSymmetry/v8c.csv', '../60XIcosahedralSymmetry/v8d.csv', '../60XIcosahedralSymmetry/v9.csv', '../60XIcosahedralSymmetry/v9a.csv', '../60XIcosahedralSymmetry/v9b.csv', '../60XIcosahedralSymmetry/v9c.csv', '../60XIcosahedralSymmetry/v9d.csv', '../60XIcosahedralSymmetry/v10.csv', '../60XIcosahedralSymmetry/v10a.csv', '../60XIcosahedralSymmetry/v10b.csv', '../60XIcosahedralSymmetry/v10c.csv', '../60XIcosahedralSymmetry/v10d.csv', '../60XIcosahedralSymmetry/v11.csv', '../60XIcosahedralSymmetry/v11a.csv', '../60XIcosahedralSymmetry/v11b.csv', '../60XIcosahedralSymmetry/v11c.csv', '../60XIcosahedralSymmetry/v11d.csv', '../60XIcosahedralSymmetry/v12.csv', '../60XIcosahedralSymmetry/v12a.csv', '../60XIcosahedralSymmetry/v12b.csv', '../60XIcosahedralSymmetry/v12c.csv', '../60XIcosahedralSymmetry/v12d.csv'}

# tiltRange: The tilt range used to acquire the tilt series [min max].
# This will compenstate  for the missing wedge in generating
# the alignment and the averages.  A empty array, [] or {}, specifies
# not to account for the missing wedge (and use more efficient
# space domain averaging).
tiltRange = {}

# dPhi: Phi is the rotation around the  Y-axis specified above by the parameter "yaxis".
# From this Y-axis, the corresponding X-axis and Z-axis are deduced.
dPhi = {0:1:0, -4.5:1.5:4.5, -2.25:0.75:2.25}

# dTheta: Theta is around the corresponding Z-axis. dTheta is the increment.
dTheta = {0:1:0, -4.5:1.5:4.5, -2.25:0.75:2.25}

# dPsi: Psi is around the corresponding X-axis. dPsi is the increment.
dPsi = {0:1:0, -4.5:1.5:4.5, -2.25:0.75:2.25}

# searchRadius: The number of pixels to search in each dimension
# searchRadius={4, 5} is equivalent to searchRadius={[4 4 4],[5 5 5]}
searchRadius = {[0], [3], [2]}

# lowCutoff: The frequency domain cutoff parameters for prefiltering the
# particles and reference lowCutoff =< 0 prevents low frequency
# filtering, hiCutoff >= 0.866 prevents high frequency filtering.
# An optional second parameter defines the transition width.
lowCutoff = {[0, 0.05], [0, 0.05], [0, 0.05]}

# hiCutoff: The frequency domain cutoff parameters for prefiltering the
# particles and reference lowCutoff =< 0 prevents low frequency
# filtering, hiCutoff >= 0.866 prevents high frequency filtering.
# An optional second parameter defines the transition width.
hiCutoff = {[0.3, 0.05], [0.3, 0.05], [0.3, 0.05]}

# refThreshold: The threshold to generate the reference particle at each stage
# If this is less than 1 it specifies a cross correlation
# coefficient threshold, if it is greater than 1 it specfies the
# number of particles to use
refThreshold = {21000, 21000, 21000}

# duplicateShiftTolerance: An arry of integers giving the maximum distance in pixels at
# which particles can be considered duplicates at each iteration. Applied 
# separately to each dimension, so the region defined is a cube rather
# than a sphere.
duplicateShiftTolerance = [1, 1, 1]
duplicateAngularTolerance = [1, 1, 1]

# reference: If it is a string it should specify the name of an MRC file containing
# the reference volume.  If it is [i  j]. It specifies the reference to be the
# jth particle of the ith tomogram.
reference = [1, 26]

# fnOutput: The base name of the output files for the average volumes, the
# reference volumes, and the transformation parameters
fnOutput = 'binnedBPV'

# szVol: The size of the volume around each particle to average
# if reference is filename, this parameter is ignored. the reference size dictates "szVol".
szVol = [42, 42, 42]

# edgeShift: The number of pixels shift the edge of the wedge mask to ensure
# that all of the frequency info is included.
edgeShift = 1

# CCMode: The cross correlation measure to use.
# 0: Local energy normalized cross correlation (default)
# 1: True local correlation coefficient
CCMode = 1

# alignedBaseName: The basename for the aligned particle MRC files (default: '').
alignedBaseName = ''

# debugLevel: How much debugging info to print {0|1|2|3}
debugLevel = 3

# lstThresholds: The list of thresholds to use for computing the final volumes.
# An average volume is generated for each value in this vector.
# The format of the average volume file name is
# fnOutout_AvgVol_navg_thresh_iteration.mrc
lstThresholds = [10000:5000:30000, 31140]

# refFlagAllTom: 1: use particles with best correlation scores among all particles of all tomos;
# 0: prefer equal number of particles from each tomo;
refFlagAllTom = 0

# lstFlagAllTom: 1: use particles with best correlation scores among all particles of all tomos;
# 0: prefer equal number of particles from each tomo;
lstFlagAllTom = 0

# particlePerCPU: Specify how to distribute workload among all CPUs.  # of particles per CPU for each
# run.
particlePerCPU = 20

# yaxisType: 0: use the volume's Y axis as the particle's Y axis.
# 1: use the vector between neighboring model points as the Y axis.
# 2: use end points of the contour specified by the "yaxisContour" parameter
#    as the Y axis.
yaxisType = 0

# yaxisObjectNum: An integer specifying the index of the model object used for Y axis determination when yaxisType is 2.
yaxisObjectNum = NaN

# yaxisContourNum: An integer specifying the index of the contour in object "yaxisObjecNum" whose endpoints will determine the Y axis for the associated volume when when yaxisType is 2.
yaxisContourNum = NaN

# flgWedgeWeight: Apply missing wedge compensation to the alignment search
flgWedgeWeight = 1

# sampleSphere: If This is set to 'full' or 'half', for the fisrt iteration, dTheta and dPsi will be ignored and
# 'dPhi' and 'sampleInterval' will be used.
# if it does not exist or is set to 'none', it will search over the range specified by dPhi, dTheta, dPsi.
sampleSphere = 'none'

# sampleInterval: The interval in degrees at which the spherical surface is sampled.
sampleInterval = 9

# maskType: If it is set to 'sphere' or 'cylinder', it will use 'insideMaskRadius' and
# 'outsideMaskRadius' to create a mask.
# If it is set to a string other than 'sphere', 'cylinder', or 'none', the
# string is assumed to be a filename of a stack whose voxels of zero value
# specify voxels that will be masked out, whose voxels of nonzero value
# specify voxels that will be included.
# If it does not exist or is set to 'none', there will be no masking.
maskType = 'sphere'

# maskModelPts: It specifies which model and which point of that model will be ued to create a
# 'cylinder' mask. The format is [i j].
# It specifies the jth point of the ith model will be used.
# It is used only when reference is specified as a filename and
# maskType='cylinder'.
# When reference is specified as [ii jj], the [ii jj] will be used.
maskModelPts = []

# insideMaskRadius: radius in pixels. Voxels residing inside this radius is masked out;
# for .77 virus tomo;
insideMaskRadius = 10

# outsideMaskRadius: radius in pixels. Voxels residing outside this radius is masked out;
outsideMaskRadius = 18

# flgRemoveDuplicates: If non-zero, search for and mark duplicate particles after
# each alignment iteration. Particles marked as duplicates will be
# excluded from averages and resolution estimates.
flgRemoveDuplicates = 1

# flgAlignAverages: If non-zero, and if "yaxisType" is also non-zero, rotate average
# volumes to have the particle's Y axes approximately vertical.
flgAlignAverages = 0

#fnWedgeWeight = 'ww'

# nWeightGroup: Disable (0) or enable (> 0) equalization of cross-correlations
# between groups based on missing wedge orientation. If enabled, equalization
# will be applied to minimize missing wedge bias during averaging and new 
# reference generation. NOTE: as of PEET 1.8.0 this parameter is an on / off 
#  flag; the number of groups is no longer under direct user control.
nWeightGroup = 8

# flgFairReference: If 1, create a multiparticle reference. Otherwise, choose a single
# particle reference or use the user-specified volume.
flgFairReference = 0

# flgAbsValue: If 1 (default), maximize the absolute value of the cross-correlation
# during alignment, rather than the raw  cross-correlation.
# Use of the absolute value reduces the chance of pure noise 
# reinforcing to match the reference, but can prevent proper alignment
# of some  highly repetitive patterns (e.g. checkerboard or zebra
# stripe patterns) in which in which in- and  out-of-phase alignments
# become indistinguishable.
flgAbsValue = 1

# flgStrictSearchLimits: If 0 (default) or missing, radial and
# angular search limits will be  applied independently at each iteration.
#  If 1, the overall change for any parameter will be limited to the largest 
# change specified at any single iteration.
flgStrictSearchLimits = 0
